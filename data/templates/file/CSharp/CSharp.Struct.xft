<?xml version="1.0"?>
<Template author="Justin Dearing" version="1.1">
	
	<Config
		  name        = "${res:Templates.File.Struct.Name}"
		  icon        = "C#.File.NewClass"
		  category    = "C#"
		  defaultname = "Struct${Number}.cs"
		  language    = "C#"/>
	
	<Description>${res:Templates.File.Struct.Description}</Description>
	
	<!--
	Special new file templates:
		${StandardNamespace}        -> Standardnamespace of the current project or FileNameWithoutExtension
		${FullName}                 -> Full generated path name
		${FileName}                 -> File name with extension
		${FileNameWithoutExtension} -> File name without extension
		${Extension}                -> Extension in the form ".cs"
		${Path}                     -> Full path of the file
		${ClassName}               -> Struct name (generally FileNameWithoutExtension w/o 'bad' characters)
	 -->
	<Files>
		<File name="${FullName}" language="C#"><![CDATA[${StandardHeader.C#}using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;

namespace ${StandardNamespace} {
	public struct ${ClassName} : IEquatable<${ClassName}> {
		int member; // TODO: replace with your own struct members

		#region Equals and GetHashCode implementation

		public override bool Equals(object obj) {
			if (obj is ${ClassName}) {
				return Equals((${ClassName})obj);
			} else {
				return false;
			}
		}

		public bool Equals(${ClassName} other) {
			// add comparisions for all members here
			return this.member == other.member;
		}

		public override int GetHashCode() {
			// combine the hash codes of all members here (e.g. with XOR operator ^)
			return member.GetHashCode();
		}

		public static bool operator ==(${ClassName} left, ${ClassName} right) {
			return left.Equals(right);
		}

		public static bool operator !=(${ClassName} left, ${ClassName} right) {
			return !left.Equals(right);
		}

		#endregion
	}
}
]]></File>
	</Files>
	
	<AdditionalOptions/>
</Template>